@extends('layouts.app')

@section('title')
    {{ config('app.name') }}
@endsection


@section('content')
    <div class="grid gap-6 lg:grid-cols-1 lg:gap-8">
        <div dir="rtl"
             class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]">
            <div class="pt-3 sm:pt-5">
                <h2 class="text-xl font-semibold text-black dark:text-white">
                    اگر در آینده به فیلترهای بیشتر و کوئری‌های پیچیده‌تری در پروژه نیاز باشد چه باید کرد؟
                </h2>

                <p class="mt-4 text-sm/relaxed">
                    با استفاده از design patternها و رعایت اصول SOLID سعی کردم به گونه‌ای پیاده‌سازی را انجام دهم که
                    برای اضافه کردن فیلترهای جدید با هر سطح پیچیدگی کوئری مشکلی وجود نداشته باشد.
                    <br>
                    معماری ماژولار، انعطاف‌پذیر و توسعه‌پذیری که برای این پیاده‌سازی استفاده شده این امر را ممکن می‌کند.
                    به عنوان مثال با استفاده از الگوی Specification برای پیاده‌سازی فیلترها، قوانین را کپسوله کردم. به
                    کمک این الگو اضافه کردن هر فیلتر جدید بدون تغییر کد‌های فعلی قابل انجام است و اصل Open/Closed هم
                    رعایت می‌شود. در این حالت، هر فیلتر یک ماژول کوچک است که هر سطح از پیچیدگی کوئری در آن به راحتی قابل
                    پیاده‌سازی است.
                    <br>
                    با ترکیب این پترن با Repository Pattern امکان ترکیب قوانین پیچیده فیلترینگ در یک کلاس مرکزی فراهم
                    می‌شود. به کمک این پترن می‌توان تمام دسترسی به دیتا را پشت یک اینترفیس کپسوله قرار داد و کل موجودیت
                    را یک بلک‌باکس دید که فارغ از اتفاقات پشت آن، یک کالکشن به ما تحویل می‌دهد. ترکیب این دو پترن امکان
                    ترکیب و استفاده از کوئری‌ها و شرط‌ها در سایر بخش‌های اپ را هم به سادگی فراهم می‌کند.
                    <br>
                    در حالتی که در آینده کوئری‌ها پیچیده‌تر شوند، برای پیاده‌سازی هر کدام می‌توان از Builder Pattern
                    استفاده کرد. بخش‌های مختلف کوئری را به صورت مجزا ساخت و با ترکیب آن‌ها در نهایت به کوئری مورد نظر
                    رسید.
                    <br>
                    همجنین برای مدیریت بهتر فیلترهای جدیدی که در آینده قرار است اضافه شود، بهتر است از Feature toggles
                    استفاده شود تا بتوان تغییرات را با اطمینان و به صورت مقطعی فعال کرد.
                </p>
            </div>
        </div>
    </div>
@endsection
